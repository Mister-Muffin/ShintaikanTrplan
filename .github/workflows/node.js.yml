# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["master"]

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present

      - uses: actions/cache/save@v3
        id: cache
        with:
          path: docs
          key: ${{ runner.os }}-${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    steps:
      - uses: actions/cache/restore@v3
        id: cache
        with:
          path: docs
          key: ${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: true
      # Upload to GitHub pages
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: "docs/"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  clean:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting cache..."
          gh actions-cache delete $CACHE_KEY -R $REPO --confirm
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CACHE_KEY: ${{ runner.os }}-${{ github.sha }}
          REPO: ${{ github.repository }}
